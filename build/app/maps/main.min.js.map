{"version":3,"sources":["base.js"],"names":["generateUUID","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","init","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","add","renderer","WebGLRenderer","alpha","antialias","setSize","document","body","appendChild","domElement","effect","StereoEffect","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","normalize","plane","Mesh","PlaneBufferGeometry","MeshNormalMaterial","overdraw","setWindowSize","aspect","setView","vrMode","updateProjectionMatrix","Player","geometry","BoxGeometry","material","MeshPhongMaterial","map","ImageUtils","loadTexture","f1","Vector2","f2","f3","f4","f5","f6","faceVertexUvs","player","addPlayer","user","socket","id","name","players","obj","Vector3","x","y","z","rotation","_x","_y","_z","lastPos","sequences","copy","console","log","cameraPos","o","t","lookAt","movingObj","b","l","keys","sequenceUUID","emit","push","posX","posY","animate","requestAnimationFrame","now","lastTime","undefined","render","mode","io","controls","cube","addEventListener","e","keyCode","ctrlObj","speed","onload","gui","dat","GUI","on","users","remove","sequence","shift","script","createElement","stats","Stats","style","cssText","loop","update","src","head"],"mappings":"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","file":"main.min.js","sourcesContent":["// ------------------------------------------\n// VARS\n// ------------------------------------------\n// SOCKET IO\nvar socket = io();\n// THREEJS\nvar scene, camera, renderer, effect;\nvar controls;\nvar ambientLight, directionalLight;\nvar cube;\nvar lastTime;\nvar setView = {\n  vrMode: false\n};\n// PLAYERS\nvar players = {};\n\n\n// ------------------------------------------\n// KEYS\n// ------------------------------------------\nvar keys = {};\ndocument.addEventListener('keydown',function(e){keys[e.keyCode]=true;},false);\ndocument.addEventListener('keyup',function(e){keys[e.keyCode]=false;},false);\n\n\n// ------------------------------------------\n// GENERATE UUID\n// ------------------------------------------\nfunction generateUUID() {\n  var d = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (d + Math.random()*16)%16 | 0;\n    d = Math.floor(d/16);\n    return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n  });\n  return uuid;\n}\n\n\n// ------------------------------------------\n// CONTROL VIEW\n// ------------------------------------------\nvar ctrlObj = {\n  rotation: 0.05,\n  speed: 0.6\n};\n\nwindow.onload = function() {\n  var gui = new dat.GUI();\n  // Speed rotation\n  //gui.add(ctrlObj, 'rotation').min(0).max(0.1).step(0.01);\n  //gui.add(ctrlObj, 'speed').min(0).max(1).step(0.1);\n  // View\n  gui.add(setView, 'vrMode');\n};\n\n\n// ------------------------------------------\n// INIT\n// ------------------------------------------\nfunction init() {\n\n  scene = new THREE.Scene();\n\n  // CAMERA\n  // ---------------------\n  camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 0.1, 1000);\n  scene.add(camera);\n\n  // RENDERER\n  // ---------------------\n  renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n\n  // STEREOSCOPIC\n  // ---------------------\n  effect = new THREE.StereoEffect(renderer);\n\n  // LIGHTS\n  // ---------------------\n  // AMBIENT\n  ambientLight = new THREE.AmbientLight(0xbbbbbb);\n  scene.add(ambientLight);\n  // DIRECTIONAL lighting\n  directionalLight = new THREE.DirectionalLight(0xffffff);\n  directionalLight.position.set(1, 1, 0.5).normalize();\n  scene.add(directionalLight);\n\n  // OBJECTS\n  // ---------------------\n  // PLANE\n  var plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(10, 10), new THREE.MeshNormalMaterial());\n  plane.overdraw = true;\n  scene.add(plane);\n}\n\n\n// ------------------------------------------\n// RESIZE SCREEN\n// ------------------------------------------\nfunction setWindowSize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  switch(setView.vrMode) {\n    case false:\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      break;\n    case true:\n      effect.setSize(window.innerWidth, window.innerHeight);\n      break;\n    default:\n      renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n  camera.updateProjectionMatrix();\n}\n\n\n// ------------------------------------------\n// PLAYER\n// ------------------------------------------\n\n// CREATE a new player object\n// with map etc..\nfunction Player() {\n  // GEOMETRY\n  var geometry = new THREE.BoxGeometry(5, 5, 5);\n  // UV MAP\n  var material = new THREE.MeshPhongMaterial({\n    map: THREE.ImageUtils.loadTexture('img/box-map.jpg')\n  });\n  var f1 = [new THREE.Vector2(0, 0.666), new THREE.Vector2(0.5, 0.666), new THREE.Vector2(0.5, 1), new THREE.Vector2(0, 1)];\n  var f2 = [new THREE.Vector2(0.5, 0.666), new THREE.Vector2(1, 0.666), new THREE.Vector2(1, 1), new THREE.Vector2(0.5, 1)];\n  var f3 = [new THREE.Vector2(0, 0.333), new THREE.Vector2(0.5, 0.333), new THREE.Vector2(0.5, 0.666), new THREE.Vector2(0, 0.666)];\n  var f4 = [new THREE.Vector2(0.5, 0.333), new THREE.Vector2(1, 0.333), new THREE.Vector2(1, 0.666), new THREE.Vector2(0.5, 0.666)];\n  var f5 = [new THREE.Vector2(0, 0), new THREE.Vector2(0.5, 0), new THREE.Vector2(0.5, 0.333), new THREE.Vector2(0, 0.333)];\n  var f6 = [new THREE.Vector2(0.5, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 0.333), new THREE.Vector2(0.5, 0.333)];\n  // Init Uv\n  geometry.faceVertexUvs[0] = [];\n  // f1\n  geometry.faceVertexUvs[0][0] = [ f1[0], f1[1], f1[3] ];\n  geometry.faceVertexUvs[0][1] = [ f1[1], f1[2], f1[3] ];\n  // f2\n  geometry.faceVertexUvs[0][2] = [ f2[0], f2[1], f2[3] ];\n  geometry.faceVertexUvs[0][3] = [ f2[1], f2[2], f2[3] ];\n  // f3\n  geometry.faceVertexUvs[0][4] = [ f3[0], f3[1], f3[3] ];\n  geometry.faceVertexUvs[0][5] = [ f3[1], f3[2], f3[3] ];\n  // f4\n  geometry.faceVertexUvs[0][6] = [ f4[0], f4[1], f4[3] ];\n  geometry.faceVertexUvs[0][7] = [ f4[1], f4[2], f4[3] ];\n  // f5\n  geometry.faceVertexUvs[0][8] = [ f5[0], f5[1], f5[3] ];\n  geometry.faceVertexUvs[0][9] = [ f5[1], f5[2], f5[3] ];\n  // f6\n  geometry.faceVertexUvs[0][10] = [ f6[0], f6[1], f6[3] ];\n  geometry.faceVertexUvs[0][11] = [ f6[1], f6[2], f6[3] ];\n  // PLAYER\n  var player = new THREE.Mesh(geometry, material);\n  player.overdraw = true;\n\n  return player;\n}\n\n// CREATE a user instance\nfunction addPlayer(user) {\n  if (socket.id !== user.name) {\n    // CREATE the player\n    players[user.name] = {\n      obj: new Player(),\n      name: user.name,\n      position: new THREE.Vector3(user.position.x, user.position.y, user.position.z),\n      rotation: new THREE.Vector3(user.rotation._x, user.rotation._y, user.rotation._z),\n      lastPos: null,\n      sequences: []\n    };\n    players[user.name].obj.name = user.name;\n    players[user.name].obj.position.copy(players[user.name].position);\n\n    // Add to scene\n    scene.add(players[user.name].obj);\n\n    // ///////\n    // LOG\n    // ///////\n    console.log(\"-------------------------------------------------\");\n    console.log(\"PLAYER : \" + players[user.name].name + \" ADDED\");\n    console.log(players[user.name].obj);\n    console.log(players[user.name].lastPos);\n    console.log(\"-------------------------------------------------\");\n    // ///////\n  }\n}\n\n\n// --------------------------------------------\n// INIT GAME WORLD WITH USERS\n// --------------------------------------------\n\n// ---------------------------\n// 1: INIT the current socket player\n// ---------------------------\nsocket.on('initPlayer', function(){\n\n  // Player\n  players[socket.id] = {\n    obj: new Player(),\n    name: socket.id,\n    position: new THREE.Vector3(0, 0, 2.5),\n    rotation: new THREE.Vector3(0, 0, 0),\n    lastPos: null,\n    sequences: []\n  };\n  players[socket.id].obj.name = players[socket.id].name;\n  players[socket.id].obj.position.copy(players[socket.id].position);\n  scene.add(players[socket.id].obj);\n\n  // ///////\n  // LOG\n  // ///////\n  console.log(\"-------------------------------------------------\");\n  console.log(\"CURRENT SOCKET PLAYER : \" + socket.id + \" ADDED\");\n  console.log(players[socket.id].obj);\n  console.log(players[socket.id].lastPos);\n  console.log(\"-------------------------------------------------\");\n  // ///////\n\n  // ---------------------------\n  // 2: INIT users\n  // Ask for all current users\n  // ---------------------------\n  socket.emit('initUsers');\n});\n\n// ---------------------------\n// 2: INIT users\n// ---------------------------\n// Get the users and init an instance for all of them\nsocket.on('initUsers', function(users){\n  // Loop on users\n  for (var user in users) {\n    addPlayer(users[user]);\n  }\n  // ---------------------------\n  // 3: ADD current socket player to the users array on the server\n  // ---------------------------\n  socket.emit('addUser', players[socket.id]);\n});\n\n// ---------------------------\n// 4: ADD new user\n// ---------------------------\nsocket.on('newUser', function(user) {\n  console.log(user);\n  addPlayer(user);\n});\n\n// ---------------------------\n// DELETE the disconnected player\n// ---------------------------\nsocket.on('deletePlayer', function(id) {\n  scene.remove(players[id].obj);\n  console.log(\"PLAYER : \" + id + \" DELETED\");\n  delete players[id];\n});\n\n\n// --------------------------------------------\n// CONTROLS\n// --------------------------------------------\n\n// CAMERA\nfunction cameraPos(o,t) {\n  o.position.x = t.position.x;\n  o.position.y = t.position.y + -30;\n  camera.position.z = 35;\n  camera.lookAt(t.position);\n}\n\n// MOVING OBJ\nfunction movingObj(o,t,r,b,l) {\n  // IF an arrow key is down\n  if (keys[t] || keys[r] || keys[b] || keys[l]) {\n\n    // 1: SEND intended movement and associated sequences to the server\n    // we are not sending position to avoid cheater\n    var sequenceUUID = generateUUID();\n    socket.emit('movePlayer', o.name, keys, sequenceUUID);\n    o.sequences.push(sequenceUUID);\n\n    // 2: PREDICT the movement of the player during the server process\n    // normaly it's the same movement as the server will\n    var posX = 50 * 0.015;\n    var posY = 50 * 0.015;\n    posX = (keys[l] ? -posX : 0) + (keys[r] ? posX : 0);\n    posY = (keys[t] ? posY : 0) + (keys[b] ? -posY : 0);\n    o.obj.position.x += posX;\n    o.obj.position.y += posY;\n  }\n}\n\n\n// --------------------------------------------\n// POSITIONS OF USERS\n// --------------------------------------------\n\n// SET the positions of the current socket players\nsocket.on('movePlayer', function(name, position, sequence) {\n  if (sequence !== players[name].sequences[0]) {\n    players[name].obj.position.y = position.y;\n    players[name].obj.position.x = position.x;\n  }\n  // Clear the last sequence\n  players[name].sequences.shift();\n});\n\n// SET the positions of all current players\nsocket.on('setPosition', function(users) {\n  for (var user in users) {\n    if (players[user] && user !== socket.id) {\n      if (players[user].lastPos !== users[user].position) {\n        players[user].obj.position.copy(users[user].position);\n      }\n      players[user].lastPos = users[user].position;\n    }\n  }\n});\n\n\n// --------------------------------------------\n// ANIMATE ALL\n// --------------------------------------------\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Calculate the time delta for this frame.\n  var now = Date.now();\n  var deltaTime = (now - lastTime) / 1000;\n  lastTime = now;\n\n  if (players[socket.id] !== undefined) {\n    // MOVING current socket player\n    movingObj(players[socket.id], 38, 39, 40, 37);\n    // Camera follow the current socket player\n    cameraPos(camera, players[socket.id].obj);\n  }\n  render(setView.vrMode);\n}\n\n\n// ------------------------------------------\n// RENDER\n// ------------------------------------------\n\n// RENDER\nfunction render(mode) {\n  switch(setView.vrMode) {\n    case false:\n      renderer.render(scene, camera);\n      break;\n    case true:\n      effect.render(scene, camera);\n      break;\n    default:\n      renderer.render(scene, camera);\n  }\n  setWindowSize();\n}\n\n\n// ------------------------------------------\n// LAUNCH\n// ------------------------------------------\ninit();\nrender(setView.vrMode);\nanimate();\n\n\n// ------------------------------------------\n// STATS\n// ------------------------------------------\n(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();stats.domElement.style.cssText='position:fixed;left:0;top:0;z-index:10000';document.body.appendChild(stats.domElement);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop);});};script.src='//rawgit.com/mrdoob/stats.js/master/build/stats.min.js';document.head.appendChild(script);})();\n\n"],"sourceRoot":"/source/"}