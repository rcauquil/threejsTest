{"version":3,"sources":["base.js"],"names":["init","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","rotation","x","position","y","z","add","renderer","WebGLRenderer","alpha","antialias","setSize","document","body","appendChild","domElement","effect","StereoEffect","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","normalize","geometry","BoxGeometry","materialSimple","MeshLambertMaterial","map","ImageUtils","loadTexture","material","MeshPhongMaterial","f1","Vector2","f2","f3","f4","f5","f6","faceVertexUvs","cube","Mesh","overdraw","plane","PlaneBufferGeometry","MeshNormalMaterial","controls","OrbitControls","addEventListener","render","target","noPan","noZoom","setWindowSize","aspect","camMode","updateProjectionMatrix","rotateZ","elem","animate","requestAnimationFrame","update","onDocumentKeyDown","event","keyCode","mode","materialf3","script","createElement","onload","stats","Stats","style","cssText","loop","src","head"],"mappings":"AAcA,QAAAA,QAEAC,MAAA,GAAAC,OAAAC,MAIAC,OAAA,GAAAF,OAAAG,kBAAA,GAAAC,OAAAC,WAAAD,OAAAE,YAAA,GAAA,KACAJ,OAAAK,SAAAC,EAAA,GACAN,OAAAO,SAAAC,EAAA,IACAR,OAAAO,SAAAE,EAAA,GACAZ,MAAAa,IAAAV,QAIAW,SAAA,GAAAb,OAAAc,eACAC,OAAA,EACAC,WAAA,IAEAH,SAAAI,QAAAb,OAAAC,WAAAD,OAAAE,aACAY,SAAAC,KAAAC,YAAAP,SAAAQ,YAIAC,OAAA,GAAAtB,OAAAuB,aAAAV,UACAS,OAAAL,QAAAb,OAAAC,WAAAD,OAAAE,aAKAkB,aAAA,GAAAxB,OAAAyB,aAAA,UACA1B,MAAAa,IAAAY,cAEAE,iBAAA,GAAA1B,OAAA2B,iBAAA,UACAD,iBAAAjB,SAAAmB,IAAA,EAAA,EAAA,IAAAC,YACA9B,MAAAa,IAAAc,iBAIA,IAAAI,UAAA,GAAA9B,OAAA+B,YAAA,EAAA,EAAA,EAKAC,gBAAA,GAAAhC,OAAAiC,qBACAC,IAAAlC,MAAAmC,WAAAC,YAAA,sBAIA,IAAAC,UAAA,GAAArC,OAAAsC,mBACAJ,IAAAlC,MAAAmC,WAAAC,YAAA,qBAEAG,IAAA,GAAAvC,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,GAAA,GAAAxC,OAAAwC,QAAA,EAAA,IACAC,IAAA,GAAAzC,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,GAAA,GAAAxC,OAAAwC,QAAA,GAAA,IACAE,IAAA,GAAA1C,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,OACAG,IAAA,GAAA3C,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,OACAI,IAAA,GAAA5C,OAAAwC,QAAA,EAAA,GAAA,GAAAxC,OAAAwC,QAAA,GAAA,GAAA,GAAAxC,OAAAwC,QAAA,GAAA,MAAA,GAAAxC,OAAAwC,QAAA,EAAA,OACAK,IAAA,GAAA7C,OAAAwC,QAAA,GAAA,GAAA,GAAAxC,OAAAwC,QAAA,EAAA,GAAA,GAAAxC,OAAAwC,QAAA,EAAA,MAAA,GAAAxC,OAAAwC,QAAA,GAAA,MAGAV,UAAAgB,cAAA,MAEAhB,SAAAgB,cAAA,GAAA,IAAAP,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAT,SAAAgB,cAAA,GAAA,IAAAP,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAEAT,SAAAgB,cAAA,GAAA,IAAAL,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAX,SAAAgB,cAAA,GAAA,IAAAL,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAEAX,SAAAgB,cAAA,GAAA,IAAAJ,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAZ,SAAAgB,cAAA,GAAA,IAAAJ,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAEAZ,SAAAgB,cAAA,GAAA,IAAAH,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAb,SAAAgB,cAAA,GAAA,IAAAH,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAEAb,SAAAgB,cAAA,GAAA,IAAAF,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAd,SAAAgB,cAAA,GAAA,IAAAF,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAEAd,SAAAgB,cAAA,GAAA,KAAAD,GAAA,GAAAA,GAAA,GAAAA,GAAA,IACAf,SAAAgB,cAAA,GAAA,KAAAD,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAKAE,KAAA,GAAA/C,OAAAgD,KAAAlB,SAAAO,UACAU,KAAAE,UAAA,EACAF,KAAAtC,SAAAE,EAAA,IACAZ,MAAAa,IAAAmC,KAEA,IAAAG,OAAA,GAAAlD,OAAAgD,KAAA,GAAAhD,OAAAmD,oBAAA,GAAA,IAAA,GAAAnD,OAAAoD,mBACAF,OAAAD,UAAA,EACAlD,MAAAa,IAAAsC,OAIAG,SAAA,GAAArD,OAAAsD,cAAApD,QACAmD,SAAAE,iBAAA,SAAAC,QACAH,SAAAI,OAAA7B,IAAA,EAAA,EAAA,GACAyB,SAAAK,OAAA,EACAL,SAAAM,QAAA,EASA,QAAAC,iBAEA,OADA1D,OAAA2D,OAAAzD,OAAAC,WAAAD,OAAAE,YACAwD,SACA,IAAA,QACAjD,SAAAI,QAAAb,OAAAC,WAAAD,OAAAE,YACA,MACA,KAAA,KACAgB,OAAAL,QAAAb,OAAAC,WAAAD,OAAAE,YACA,MACA,SACAO,SAAAI,QAAAb,OAAAC,WAAAD,OAAAE,aAEAJ,OAAA6D,yBASA,QAAAC,SAAAC,MACAA,KAAA1D,SAAAI,GAAA,IAKA,QAAAuD,WACAC,sBAAAD,SACAF,QAAAjB,MACAM,SAAAe,SACAZ,OAAAM,SAUA,QAAAO,qBACA,OAAAC,MAAAC,SACA,IAAA,IACAT,QAAA,QACA,MACA,KAAA,IACAA,QAAA,IACA,MACA,SACAA,QAAAA,SAKA,QAAAN,QAAAgB,MACA,OAAAV,SACA,IAAA,QACAjD,SAAA2C,OAAAzD,MAAAG,OACA,MACA,KAAA,KACAoB,OAAAkC,OAAAzD,MAAAG,OACA,MACA,SACAW,SAAA2C,OAAAzD,MAAAG,QAEA0D,gBAvLA,GAAA7D,OAAAG,OAAAW,SAAAS,OACA+B,SACAhB,SAAAoC,WACAjD,aAAAE,iBACAqB,KACAe,QAAA,QAwJA5C,UAAAqC,iBAAA,UAAAc,mBAAA,GAiCAvE,OACA0D,OAAAM,SACAI,UAMA,WAAA,GAAAQ,QAAAxD,SAAAyD,cAAA,SAAAD,QAAAE,OAAA,WAAA,GAAAC,OAAA,GAAAC,MAAAD,OAAAxD,WAAA0D,MAAAC,QAAA,4CAAA9D,SAAAC,KAAAC,YAAAyD,MAAAxD,YAAA8C,sBAAA,QAAAc,QAAAJ,MAAAT,SAAAD,sBAAAc,SAAAP,OAAAQ,IAAA,yDAAAhE,SAAAiE,KAAA/D,YAAAsD","file":"main.min.js","sourcesContent":["// ------------------------------------------\n// VARS\n// ------------------------------------------\nvar scene, camera, renderer, effect;\nvar controls;\nvar material, materialf3;\nvar ambientLight, directionalLight;\nvar cube;\nvar camMode = \"normal\";\n\n\n// ------------------------------------------\n// INIT\n// ------------------------------------------\nfunction init() {\n\n  scene = new THREE.Scene();\n\n  // CAMERA\n  // ---------------------\n  camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.rotation.x = 0.2;\n  camera.position.y = -15;\n  camera.position.z = 20;\n  scene.add(camera);\n\n  // RENDERER\n  // ---------------------\n  renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n\n  // STEREOSCOPIC\n  // ---------------------\n  effect = new THREE.StereoEffect(renderer);\n  effect.setSize(window.innerWidth, window.innerHeight);\n\n  // LIGHTS\n  // ---------------------\n  // AMBIENT\n  ambientLight = new THREE.AmbientLight(0xbbbbbb);\n  scene.add(ambientLight);\n  // DIRECTIONAL lighting\n  directionalLight = new THREE.DirectionalLight(0xffffff);\n  directionalLight.position.set(1, 1, 0.5).normalize();\n  scene.add(directionalLight);\n\n  // GEOMETRIES\n  // ---------------------\n  var geometry = new THREE.BoxGeometry(5, 5, 5);\n\n  // MATERIALS\n  // ---------------------\n  // SIMPLE f3\n  materialSimple = new THREE.MeshLambertMaterial({\n    map: THREE.ImageUtils.loadTexture('assets/02-box.jpg')\n  });\n\n  // UV TEST\n  var material = new THREE.MeshPhongMaterial({\n    map: THREE.ImageUtils.loadTexture('img/box-map.jpg')\n  });\n  var f1 = [new THREE.Vector2(0, 0.666), new THREE.Vector2(0.5, 0.666), new THREE.Vector2(0.5, 1), new THREE.Vector2(0, 1)];\n  var f2 = [new THREE.Vector2(0.5, 0.666), new THREE.Vector2(1, 0.666), new THREE.Vector2(1, 1), new THREE.Vector2(0.5, 1)];\n  var f3 = [new THREE.Vector2(0, 0.333), new THREE.Vector2(0.5, 0.333), new THREE.Vector2(0.5, 0.666), new THREE.Vector2(0, 0.666)];\n  var f4 = [new THREE.Vector2(0.5, 0.333), new THREE.Vector2(1, 0.333), new THREE.Vector2(1, 0.666), new THREE.Vector2(0.5, 0.666)];\n  var f5 = [new THREE.Vector2(0, 0), new THREE.Vector2(0.5, 0), new THREE.Vector2(0.5, 0.333), new THREE.Vector2(0, 0.333)];\n  var f6 = [new THREE.Vector2(0.5, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 0.333), new THREE.Vector2(0.5, 0.333)];\n\n  // Init Uv\n  geometry.faceVertexUvs[0] = [];\n  // f1\n  geometry.faceVertexUvs[0][0] = [ f1[0], f1[1], f1[3] ];\n  geometry.faceVertexUvs[0][1] = [ f1[1], f1[2], f1[3] ];\n  // f2\n  geometry.faceVertexUvs[0][2] = [ f2[0], f2[1], f2[3] ];\n  geometry.faceVertexUvs[0][3] = [ f2[1], f2[2], f2[3] ];\n  // f3\n  geometry.faceVertexUvs[0][4] = [ f3[0], f3[1], f3[3] ];\n  geometry.faceVertexUvs[0][5] = [ f3[1], f3[2], f3[3] ];\n  // f4\n  geometry.faceVertexUvs[0][6] = [ f4[0], f4[1], f4[3] ];\n  geometry.faceVertexUvs[0][7] = [ f4[1], f4[2], f4[3] ];\n  // f5\n  geometry.faceVertexUvs[0][8] = [ f5[0], f5[1], f5[3] ];\n  geometry.faceVertexUvs[0][9] = [ f5[1], f5[2], f5[3] ];\n  // f6\n  geometry.faceVertexUvs[0][10] = [ f6[0], f6[1], f6[3] ];\n  geometry.faceVertexUvs[0][11] = [ f6[1], f6[2], f6[3] ];\n\n  // OBJECTS\n  // ---------------------\n  // CUBE\n  cube = new THREE.Mesh(geometry, material);\n  cube.overdraw = true;\n  cube.position.z = 2.5;\n  scene.add(cube);\n  // PLANE\n  var plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(10, 10), new THREE.MeshNormalMaterial());\n  plane.overdraw = true;\n  scene.add(plane);\n\n  // CONTROLS\n  // ---------------------\n  controls = new THREE.OrbitControls(camera);\n  controls.addEventListener('change', render);\n  controls.target.set(0,0,0);\n  controls.noPan = true;\n  controls.noZoom = false;\n\n\n}\n\n\n// ------------------------------------------\n// RESIZE SCREEN\n// ------------------------------------------\nfunction setWindowSize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  switch(camMode) {\n    case \"nomal\":\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      break;\n    case \"vr\":\n      effect.setSize(window.innerWidth, window.innerHeight);\n      break;\n    default:\n      renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n  camera.updateProjectionMatrix();\n}\n\n\n// ------------------------------------------\n// ANIMATE\n// ------------------------------------------\n\n// ROTATE\nfunction rotateZ(elem) {\n  elem.rotation.z += 0.01;\n}\n\n// ANIMATE ALL\n// ----------------\nfunction animate() {\n  requestAnimationFrame(animate);\n  rotateZ(cube);\n  controls.update();\n  render(camMode);\n}\n\n\n// ------------------------------------------\n// RENDER\n// ------------------------------------------\n\n// CHANGE VIEW on keydown\ndocument.addEventListener('keydown', onDocumentKeyDown, false);\nfunction onDocumentKeyDown() {\n  switch (event.keyCode) {\n    case 78:\n      camMode = \"normal\";\n      break;\n    case 83:\n      camMode = \"vr\";\n      break;\n    default:\n      camMode = camMode;\n  }\n}\n\n// RENDER\nfunction render(mode) {\n  switch(camMode) {\n    case \"nomal\":\n      renderer.render(scene, camera);\n      break;\n    case \"vr\":\n      effect.render(scene, camera);\n      break;\n    default:\n      renderer.render(scene, camera);\n  }\n  setWindowSize();\n}\n\n\n// ------------------------------------------\n// LAUNCH\n// ------------------------------------------\ninit();\nrender(camMode);\nanimate();\n\n\n// ------------------------------------------\n// STATS\n// ------------------------------------------\n(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();stats.domElement.style.cssText='position:fixed;left:0;top:0;z-index:10000';document.body.appendChild(stats.domElement);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop);});};script.src='//rawgit.com/mrdoob/stats.js/master/build/stats.min.js';document.head.appendChild(script);})();\n\n"],"sourceRoot":"/source/"}